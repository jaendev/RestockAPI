// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestockAPI.Data.Context;

#nullable disable

namespace RestockAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250614145151_FixSeedDataWithStaticDates")]
    partial class FixSeedDataWithStaticDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestockAPI.Models.AlertStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#6b7280");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFinalState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_AlertStatuses_Name");

                    b.ToTable("AlertStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f59e0b",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La alerta está activa y requiere atención",
                            IsActive = true,
                            IsFinalState = false,
                            Name = "Activa"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3b82f6",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La alerta ha sido vista y reconocida por el usuario",
                            IsActive = true,
                            IsFinalState = false,
                            Name = "Reconocida"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#22c55e",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La alerta ha sido resuelta y está cerrada",
                            IsActive = true,
                            IsFinalState = true,
                            Name = "Resuelta"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#6b7280",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La alerta ha sido descartada sin acción",
                            IsActive = true,
                            IsFinalState = true,
                            Name = "Descartada"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#8b5cf6",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La alerta está siendo atendida actualmente",
                            IsActive = true,
                            IsFinalState = false,
                            Name = "En Proceso"
                        });
                });

            modelBuilder.Entity("RestockAPI.Models.AlertType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#6b7280");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Normal");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_AlertTypes_Name");

                    b.ToTable("AlertTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#f59e0b",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El stock del producto está por debajo del mínimo establecido",
                            IsActive = true,
                            Name = "Stock Bajo",
                            Priority = "Medio"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#ef4444",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El producto está completamente agotado",
                            IsActive = true,
                            Name = "Sin Stock",
                            Priority = "Alto"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#f97316",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El producto está cerca de su fecha de vencimiento",
                            IsActive = true,
                            Name = "Próximo a Vencer",
                            Priority = "Bajo"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#8b5cf6",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El producto tiene stock excesivamente alto",
                            IsActive = true,
                            Name = "Exceso de Stock",
                            Priority = "Bajo"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#06b6d4",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El precio del producto ha sido modificado",
                            IsActive = true,
                            Name = "Precio Cambiado",
                            Priority = "Informativo"
                        });
                });

            modelBuilder.Entity("RestockAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#6366f1");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Categories_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Categories_Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#22c55e",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos alimenticios y comestibles",
                            IsActive = true,
                            Name = "Alimentos"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#06b6d4",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bebidas y refrescos",
                            IsActive = true,
                            Name = "Bebidas"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#3b82f6",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos de limpieza para el hogar",
                            IsActive = true,
                            Name = "Limpieza"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#f59e0b",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos de higiene y cuidado personal",
                            IsActive = true,
                            Name = "Higiene Personal"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#ef4444",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Medicamentos y productos farmacéuticos",
                            IsActive = true,
                            Name = "Medicinas"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#8b5cf6",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Artículos para el hogar y decoración",
                            IsActive = true,
                            Name = "Hogar"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#10b981",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos para mascotas y animales",
                            IsActive = true,
                            Name = "Mascotas"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#6b7280",
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos varios sin categoría específica",
                            IsActive = true,
                            Name = "Otros"
                        });
                });

            modelBuilder.Entity("RestockAPI.Models.InventoryAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AlertStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AlertStatusId")
                        .HasDatabaseName("IX_InventoryAlerts_AlertStatusId");

                    b.HasIndex("AlertTypeId")
                        .HasDatabaseName("IX_InventoryAlerts_AlertTypeId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InventoryAlerts_CreatedAt");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_InventoryAlerts_ProductId");

                    b.HasIndex("AlertStatusId", "AlertTypeId")
                        .HasDatabaseName("IX_InventoryAlerts_Status_Type");

                    b.ToTable("InventoryAlerts");
                });

            modelBuilder.Entity("RestockAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Products_CategoryId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Products_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_Products_UnitId");

                    b.HasIndex("IsActive", "CategoryId")
                        .HasDatabaseName("IX_Products_IsActive_CategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("CK_Product_CurrentStock_NonNegative", "\"CurrentStock\" >= 0");

                            t.HasCheckConstraint("CK_Product_MinimumStock_NonNegative", "\"MinimumStock\" >= 0");

                            t.HasCheckConstraint("CK_Product_Price_NonNegative", "\"Price\" IS NULL OR \"Price\" >= 0");
                        });
                });

            modelBuilder.Entity("RestockAPI.Models.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UnitTypes_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_UnitTypes_Name");

                    b.ToTable("UnitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos por unidad individual",
                            IsActive = true,
                            Name = "Unidades",
                            Symbol = "un"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Peso en kilogramos",
                            IsActive = true,
                            Name = "Kilogramos",
                            Symbol = "kg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Peso en gramos",
                            IsActive = true,
                            Name = "Gramos",
                            Symbol = "g"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Volumen en litros",
                            IsActive = true,
                            Name = "Litros",
                            Symbol = "L"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Volumen en mililitros",
                            IsActive = true,
                            Name = "Mililitros",
                            Symbol = "mL"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en paquetes",
                            IsActive = true,
                            Name = "Paquetes",
                            Symbol = "paq"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en cajas",
                            IsActive = true,
                            Name = "Cajas",
                            Symbol = "cajas"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en botellas",
                            IsActive = true,
                            Name = "Botellas",
                            Symbol = "bot"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en tubos",
                            IsActive = true,
                            Name = "Tubos",
                            Symbol = "tubos"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos por docenas",
                            IsActive = true,
                            Name = "Docenas",
                            Symbol = "doc"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en latas",
                            IsActive = true,
                            Name = "Latas",
                            Symbol = "latas"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 6, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Productos en sobres",
                            IsActive = true,
                            Name = "Sobres",
                            Symbol = "sobres"
                        });
                });

            modelBuilder.Entity("RestockAPI.Models.InventoryAlert", b =>
                {
                    b.HasOne("RestockAPI.Models.AlertStatus", "AlertStatus")
                        .WithMany("InventoryAlerts")
                        .HasForeignKey("AlertStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestockAPI.Models.AlertType", "AlertType")
                        .WithMany("InventoryAlerts")
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestockAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertStatus");

                    b.Navigation("AlertType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RestockAPI.Models.Product", b =>
                {
                    b.HasOne("RestockAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestockAPI.Models.UnitType", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RestockAPI.Models.AlertStatus", b =>
                {
                    b.Navigation("InventoryAlerts");
                });

            modelBuilder.Entity("RestockAPI.Models.AlertType", b =>
                {
                    b.Navigation("InventoryAlerts");
                });

            modelBuilder.Entity("RestockAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RestockAPI.Models.UnitType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
